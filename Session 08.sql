

/*
    ==========================================================
    جلسه ۸: دستورات Aggregation و GROUP BY
    ==========================================================
    
    در این جلسه، با دستورات **Aggregation** مانند `COUNT`, `AVG`, `SUM`, `MAX`, `MIN` و همچنین با
	**GROUP BY** آشنا می‌شویم که برای انجام محاسبات تجمیعی بر روی داده‌ها استفاده می‌شوند.
	این دستورات به شما کمک می‌کنند تا بتوانید بر اساس گروه‌ها داده‌ها را تجزیه و تحلیل کنید
	و محاسبات مختلفی مانند تعداد، میانگین، مجموع، حداکثر و حداقل را انجام دهید.
    
    دستورات **Aggregation** به شما این امکان را می‌دهند که روی داده‌های خاصی که تحت شرایط خاصی قرار دارند،
	محاسباتی مانند تعداد رکوردها، میانگین قیمت‌ها، مجموع فروش‌ها و ... انجام دهید.
    
    این مثال‌ها از دیتابیس آموزشی **pubs** گرفته شده است که جداولی مانند `titles`, `sales`, `titleauthor`, و `authors` در آن وجود دارند.

    مفاهیم یادگیری شده:
    1. **COUNT** - شمارش تعداد رکوردها
    2. **AVG** - محاسبه میانگین
    3. **SUM** - محاسبه مجموع
    4. **MAX** / **MIN** - محاسبه بیشترین و کمترین مقدار
    5. **GROUP BY** - گروه‌بندی داده‌ها بر اساس یک یا چند ستون
    6. **HAVING** - اعمال شرط روی نتایج گروه‌بندی شده
    7. **DISTINCT** - انتخاب داده‌های یکتا
    ==========================================================
*/


/*

	SELECT AggFn(Field)
		FROM Table

	
	SELECT Field1 , Field2 , AggFn(Field)
		FROM Table INNER JOIN 
			 Table_B ON Key_A = Key_B
		WHERE Condition
		GROUP BY  Field1 , Field2
		HAVING AggFn()
		ORDER BY Field
*/

USE T_pubs
GO



/* ========================================================
   1. انتخاب تمام داده‌ها از جدول titles
   ========================================================== */

SELECT * 
FROM titles;


/* ========================================================
   2. شمارش تعداد رکوردها در جدول titles
   ========================================================== */

SELECT COUNT(title_id) AS CountTitles
FROM titles;


/* ========================================================
   3. محاسبه میانگین، حداقل و حداکثر قیمت در جدول titles
   در این کوئری از توابع **AVG**, **MIN** و **MAX** استفاده شده است تا میانگین، حداقل و حداکثر قیمت از جدول `titles` محاسبه شود.
   ========================================================== */

SELECT AVG(price), MIN(price), MAX(price)
FROM titles;


/* ========================================================
   4. محاسبه مجموع قیمت به ازای هر رکورد، میانگین قیمت، تعداد عنوان‌ها و تعداد قیمت‌ها
   این کوئری از توابع **SUM**, **AVG**, **COUNT** برای محاسبه مجموع قیمت‌ها به ازای هر رکورد، میانگین قیمت‌ها، تعداد عنوان‌ها و تعداد قیمت‌ها استفاده می‌کند.
   ========================================================== */

SELECT SUM(price) / COUNT(price), AVG(price), COUNT(title_id), COUNT(price)
FROM titles;


/* ========================================================
   5. شمارش تعداد تمام رکوردها در جدول titles
   در این کوئری از دستور **COUNT(*)** استفاده شده است تا تعداد تمام رکوردهای موجود در جدول `titles` شمارش شود.
   ========================================================== */

SELECT COUNT(*)
FROM titles;

/* ========================================================
   6. محاسبه مجموع فروش‌ها (qty * price) با استفاده از INNER JOIN
   این کوئری داده‌ها را از جداول `titles` و `sales` ترکیب می‌کند و مجموع فروش‌ها را محاسبه می‌کند که حاصل ضرب قیمت و تعداد است.
   ==========================================================
*/
SELECT SUM(qty * price)
FROM titles t
INNER JOIN sales s ON s.title_id = t.title_id;


/* ========================================================
   7. شمارش تعداد رکوردها در جدول titles بر اساس نوع (type)
   در این کوئری داده‌ها از جدول `titles` بر اساس نوع (type) گروه‌بندی می‌شوند و سپس تعداد رکوردها در هر گروه شمارش می‌شود.
   ==========================================================
*/
SELECT type, COUNT(*)
FROM titles
GROUP BY type;


/* ========================================================
   8. محاسبه میانگین قیمت بر اساس نوع (type) در جدول titles
   این کوئری داده‌ها از جدول `titles` را بر اساس نوع (type) گروه‌بندی می‌کند و سپس میانگین قیمت هر گروه را محاسبه می‌کند.
   ==========================================================
*/
SELECT type, AVG(price)
FROM titles
GROUP BY type;


/* ========================================================
   9. محاسبه مجموع فروش‌ها (qty * price) بر اساس نوع (type)
   این کوئری داده‌ها را از جداول `titles` و `sales` ترکیب می‌کند و مجموع فروش‌ها را بر اساس نوع (type) محاسبه می‌کند.
   ==========================================================
*/
SELECT type, SUM(qty * price) AS Amount
FROM titles t
INNER JOIN sales s ON s.title_id = t.title_id
GROUP BY type;


/* ========================================================
   10. شمارش تعداد نویسندگان برای هر عنوان با استفاده از LEFT JOIN
   این کوئری داده‌ها را از جداول `titles` و `titleauthor` ترکیب می‌کند و تعداد نویسندگان (au_id) برای هر عنوان (title) را شمارش می‌کند.
   **LEFT JOIN** باعث می‌شود که تمام داده‌های جدول `titles` نمایش داده شود حتی اگر نویسنده‌ای برای آن عنوان وجود نداشته باشد.
   ==========================================================
*/
SELECT t.title_id, title, COUNT(au_id)
FROM titles t
LEFT JOIN titleauthor a ON a.title_id = t.title_id
GROUP BY t.title_id, title;


/* ========================================================
   11. شمارش تعداد عنوان‌ها برای هر نویسنده با استفاده از LEFT JOIN
   این کوئری داده‌ها را از جداول `authors` و `titleauthor` ترکیب می‌کند و تعداد عنوان‌ها (title_id) برای هر نویسنده (au_id) را شمارش می‌کند.
   **LEFT JOIN** باعث می‌شود که تمام داده‌های جدول `authors` نمایش داده شود حتی اگر نویسنده‌ای برای آن عنوان وجود نداشته باشد.
   ==========================================================
*/
SELECT authors.au_id, au_fname, au_lname, COUNT(title_id)
FROM authors
LEFT JOIN titleauthor ON titleauthor.au_id = authors.au_id
GROUP BY authors.au_id, au_fname, au_lname;


/* ========================================================
   12. شمارش تعداد عنوان‌های یکتا از جدول titleauthor
   این کوئری تعداد رکوردهای یکتا از ستون `title_id` در جدول `titleauthor` را شمارش می‌کند.
   **DISTINCT** به ما این امکان رو می‌ده که فقط رکوردهای یکتا رو شمارش کنیم.
   ==========================================================
*/
SELECT COUNT(DISTINCT title_id)
FROM titleauthor;


/* ========================================================
   13. محاسبه مجموع فروش‌ها (qty * price) با استفاده از INNER JOIN
   این کوئری داده‌ها را از جداول `titles` و `sales` ترکیب می‌کند و مجموع فروش‌ها را محاسبه می‌کند که حاصل ضرب قیمت و تعداد است.
   ==========================================================
*/
SELECT SUM(qty * price)
FROM titles t
INNER JOIN sales s ON s.title_id = t.title_id;


/* ========================================================
   14. محاسبه مجموع فروش‌ها بر اساس نوع (type)
   این کوئری داده‌ها را از جداول `titles` و `sales` ترکیب می‌کند و مجموع فروش‌ها را بر اساس نوع (type) محاسبه می‌کند.
   ==========================================================
*/
SELECT type, SUM(qty * price) AS Amount
FROM titles t
INNER JOIN sales s ON s.title_id = t.title_id
GROUP BY type;


/* ========================================================
   15. محاسبه مجموع فروش‌ها برای هر عنوان
   این کوئری داده‌ها را از جداول `titles` و `sales` ترکیب می‌کند و مجموع فروش‌ها را برای هر عنوان (title) محاسبه می‌کند.
   ==========================================================
*/
SELECT t.title_id, title, SUM(qty * price) AS Amount
FROM titles t
INNER JOIN sales s ON s.title_id = t.title_id
GROUP BY t.title_id, title;


/* ========================================================
   16. محاسبه مجموع فروش‌ها (qty * price) بر اساس ناشر
   این کوئری داده‌ها را از جداول `titles`, `sales`, و `publishers` ترکیب می‌کند و مجموع فروش‌ها را بر اساس ناشر (pub_id) محاسبه می‌کند.
   این کوئری از **INNER JOIN** برای ترکیب داده‌ها استفاده می‌کند.
   ==========================================================
*/
SELECT p.pub_id, pub_name, SUM(qty * price) AS Amount
FROM titles t
INNER JOIN sales s ON s.title_id = t.title_id
INNER JOIN publishers p ON p.pub_id = t.pub_id
GROUP BY p.pub_id, pub_name;


/* ========================================================
   17. انتخاب رکورد با بالاترین قیمت از جدول titles
   این کوئری رکوردی را از جدول `titles` انتخاب می‌کند که بیشترین قیمت را دارد.
   **TOP 1** برای انتخاب فقط یک رکورد با بالاترین قیمت استفاده می‌شود.
   ==========================================================
*/
SELECT TOP 1 *
FROM titles
ORDER BY price DESC;


/* ========================================================
   18. محاسبه بیشترین قیمت در جدول titles
   این کوئری از تابع **MAX** استفاده می‌کند تا بیشترین قیمت را از جدول `titles` استخراج کند.
   ==========================================================
*/
SELECT MAX(price)
FROM titles;


/* ========================================================
   19. انتخاب رکوردهایی از جدول titles با بالاترین قیمت
   این کوئری داده‌هایی را از جدول `titles` نمایش می‌دهد که قیمت آن‌ها برابر با بیشترین قیمت در جدول است.
   برای پیدا کردن بیشترین قیمت از یک **SUBQUERY** استفاده شده است.
   ==========================================================
*/
SELECT *
FROM titles
WHERE price = (SELECT MAX(price) FROM titles);


/* ========================================================
   20. انتخاب داده‌ها از جدول titles که نویسنده‌ای ندارند
   این کوئری از **LEFT JOIN** برای ترکیب داده‌ها از جدول `titles` و `titleauthor` استفاده می‌کند و سپس رکوردهایی را که نویسنده (au_id) ندارند نمایش می‌دهد.
   ==========================================================
*/
SELECT titles.*
FROM titles
LEFT JOIN titleauthor ON titleauthor.title_id = titles.title_id
WHERE au_id IS NULL;

/* ========================================================
   21. انتخاب رکوردهایی از جدول titles که در جدول titleauthor موجود نیستند
   این کوئری داده‌هایی را از جدول `titles` نمایش می‌دهد که `title_id` آن‌ها در جدول `titleauthor` موجود نباشد.
   **NOT IN** برای فیلتر کردن رکوردهایی استفاده می‌شود که در زیرپرس‌جو موجود نیستند.
   ==========================================================
*/
SELECT * 
FROM titles
WHERE title_id NOT IN (SELECT title_id FROM titleauthor);


/* ========================================================
   22. انتخاب تمام داده‌ها از جدول titles که با جدول titleauthor ترکیب شده‌اند
   این کوئری داده‌ها از جدول `titles` و `titleauthor` را ترکیب می‌کند و تمامی رکوردهای تطابقی را نمایش می‌دهد.
   **INNER JOIN** به این معنی است که فقط رکوردهایی که در هر دو جدول وجود دارند نمایش داده می‌شوند.
   ==========================================================
*/
SELECT DISTINCT titles.*
FROM titles
INNER JOIN titleauthor ON titleauthor.title_id = titles.title_id;


/* ========================================================
   23. انتخاب رکوردهایی از جدول titles که در جدول titleauthor موجود هستند
   این کوئری داده‌هایی را از جدول `titles` نمایش می‌دهد که `title_id` آن‌ها در جدول `titleauthor` موجود باشد.
   **IN** برای فیلتر کردن رکوردهایی استفاده می‌شود که در زیرپرس‌جو موجود هستند.
   ==========================================================
*/
SELECT * 
FROM titles
WHERE title_id IN (SELECT title_id FROM titleauthor);


/* ========================================================
   24. انتخاب رکوردهایی از جدول titles که قیمت آن‌ها در بین ۶ قیمت برتر قرار دارد
   این کوئری رکوردهایی را از جدول `titles` انتخاب می‌کند که قیمت آن‌ها در میان ۶ قیمت برتر از جدول `titles` قرار دارد.
   **DISTINCT TOP 6** برای انتخاب ۶ قیمت برتر و استفاده از **IN** برای فیلتر کردن استفاده می‌شود.
   ==========================================================
*/
SELECT * 
FROM titles
WHERE price IN (SELECT DISTINCT TOP 6 price FROM titles ORDER BY price DESC );


/* ========================================================
   25. محاسبه مجموع فروش‌ها برای هر عنوان از نوع 'business'
   این کوئری داده‌ها را از جداول `titles` و `sales` ترکیب می‌کند و مجموع فروش‌ها (qty * price) را برای هر عنوان از نوع `business` محاسبه می‌کند.
   داده‌ها بر اساس عنوان و `title_id` گروه‌بندی شده‌اند.
   ==========================================================
*/
SELECT t.title_id, title, SUM(qty * price)
FROM titles t
INNER JOIN sales s ON s.title_id = t.title_id
WHERE type = 'business'
GROUP BY t.title_id, title;

/* ========================================================
   26. محاسبه مجموع فروش‌ها (qty * price) برای نوع 'business'
   این کوئری داده‌ها را از جداول `titles` و `sales` ترکیب می‌کند و مجموع فروش‌ها را برای داده‌هایی که نوع آن‌ها `business` است محاسبه می‌کند.
   داده‌ها بر اساس نوع (type) گروه‌بندی شده‌اند.
   ==========================================================
*/
SELECT type, SUM(qty * price)
FROM titles t
INNER JOIN sales s ON s.title_id = t.title_id
WHERE type = 'business'
GROUP BY type;


/* ========================================================
   27. محاسبه مجموع فروش‌ها برای هر عنوان (title) که مجموع فروش‌ها بیشتر از 200 باشد
   این کوئری مجموع فروش‌ها را برای هر عنوان از جدول `titles` و `sales` محاسبه می‌کند، سپس با استفاده از **HAVING** فقط رکوردهایی را نمایش می‌دهد که مجموع فروش آن‌ها بیشتر از 200 باشد.
   ==========================================================
*/
SELECT t.title_id, title, SUM(qty * price)
FROM titles t
INNER JOIN sales s ON s.title_id = t.title_id
GROUP BY t.title_id, title
HAVING SUM(qty * price) > 200;


/* ========================================================
   28. محاسبه مجموع فروش‌ها برای هر عنوان و مرتب‌سازی آن‌ها به ترتیب نزولی
   این کوئری مجموع فروش‌ها را برای هر عنوان محاسبه می‌کند و سپس رکوردهایی که مجموع فروش آن‌ها بیشتر از 200 است را به ترتیب نزولی بر اساس مقدار فروش نمایش می‌دهد.
   ==========================================================
*/
SELECT t.title_id, title, SUM(qty * price) AS Amount
FROM titles t
INNER JOIN sales s ON s.title_id = t.title_id
GROUP BY t.title_id, title
HAVING SUM(qty * price) > 200
ORDER BY Amount DESC;


/* ========================================================
   29. محاسبه مجموع فروش‌ها برای هر عنوان از نوع 'business'
   این کوئری مجموع فروش‌ها را برای هر عنوان از نوع `business` محاسبه می‌کند. داده‌ها بر اساس نوع (type) و عنوان (title) گروه‌بندی شده‌اند.
   ==========================================================
*/
SELECT t.title_id, title, SUM(qty * price)
FROM titles t
INNER JOIN sales s ON s.title_id = t.title_id
GROUP BY t.title_id, title, type
HAVING type = 'business';


/* ========================================================
   30. محاسبه مجموع فروش‌ها برای هر عنوان از نوع 'business' بدون استفاده از HAVING
   این کوئری مجموع فروش‌ها را برای هر عنوان از نوع `business` محاسبه می‌کند بدون اینکه از **HAVING** استفاده شود.
   ==========================================================
*/
SELECT t.title_id, title, SUM(qty * price)
FROM titles t
INNER JOIN sales s ON s.title_id = t.title_id
WHERE type = 'business'
GROUP BY t.title_id, title;
